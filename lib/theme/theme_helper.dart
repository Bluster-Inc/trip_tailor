import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:trip_tailor/core/utils/pref_utils.dart';
import 'package:trip_tailor/core/utils/size_utils.dart';
import 'package:get/get.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimaryContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.blueGray100,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.gray10001,
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray200,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray600,
          fontSize: 16.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray600,
          fontSize: 14.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray600,
          fontSize: 12.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 40.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 32.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: 24.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray600,
          fontSize: 12.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.gray600,
          fontSize: 10.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: appTheme.cyanA100,
          fontSize: 8.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: 20.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 16.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray600,
          fontSize: 14.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XE816D4E9),
    primaryContainer: Color(0XFFF50100),
    secondaryContainer: Color(0XFFF5C300),

    // Error colors
    errorContainer: Color(0XFF1877F2),
    onError: Color(0XFFF79E1B),
    onErrorContainer: Color(0X0A0E172A),

    // On colors(text colors)
    onPrimary: Color(0XFF5C0632),
    onPrimaryContainer: Color(0XCCFFFFFF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber200 => Color(0XFFFAD998);
  Color get amber500 => Color(0XFFFFC107);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue60019 => Color(0X193389EA);
  Color get blue700 => Color(0XFF006CE5);
  Color get blue900 => Color(0XFF1434CB);
  Color get blueA400 => Color(0XFF337FFF);

  // BlueGray
  Color get blueGray100 => Color(0XFFD1D5DB);
  Color get blueGray10001 => Color(0XFFCBD5E1);
  Color get blueGray300 => Color(0XFF94A3B8);
  Color get blueGray30001 => Color(0XFF9CA3AF);
  Color get blueGray50 => Color(0XFFEEF1F6);
  Color get blueGray700 => Color(0XFF4B5563);
  Color get blueGray800 => Color(0XFF374151);
  Color get blueGray80001 => Color(0XFF254D51);

  // Cyan
  Color get cyan100 => Color(0XFFBEF8FF);
  Color get cyan900 => Color(0XFF004D6E);
  Color get cyanA100 => Color(0XFF94F3FE);
  Color get cyanA10001 => Color(0XFF6AEFFE);

  // DeepOrange
  Color get deepOrangeA700 => Color(0XFFCE210F);

  // Gray
  Color get gray100 => Color(0XFFF3F4F6);
  Color get gray10001 => Color(0XFFF5F7F8);
  Color get gray10002 => Color(0XFFF1F5F9);
  Color get gray200 => Color(0XFFE5E7EB);
  Color get gray20001 => Color(0XFFF0F0F0);
  Color get gray50 => Color(0XFFF8F9FA);
  Color get gray5001 => Color(0XFFF7FBFF);
  Color get gray600 => Color(0XFF6B7280);
  Color get gray900 => Color(0XFF111827);
  Color get gray90001 => Color(0XFF0F172A);

  // Grayf
  Color get gray6000f => Color(0X0F6B727F);

  // Green
  Color get greenA700 => Color(0XFF22C55E);

  // Indigo
  Color get indigo900 => Color(0XFF27346A);
  Color get indigo90001 => Color(0XFF0B1560);

  // LightBlue
  Color get lightBlue50 => Color(0XFFE8FCFF);
  Color get lightBlue900 => Color(0XFF004685);
  Color get lightBlueA200 => Color(0XFF40E9FD);
  Color get lightBlueA20001 => Color(0XFF38BDF8);
  Color get lightBlueA20002 => Color(0XFF33CCFF);

  // Red
  Color get red500 => Color(0XFFEB4335);
  Color get red600 => Color(0XFFDD3333);
  Color get red700 => Color(0XFFE31D1C);
  Color get red70001 => Color(0XFFE31837);
  Color get redA100 => Color(0XFFFF8092);
  Color get redA200 => Color(0XFFFF4747);
  Color get redA700 => Color(0XFFFF0000);

  // Teal
  Color get tealA400 => Color(0XFF2DD4BF);

  // Yellow
  Color get yellow400 => Color(0XFFFFDE65);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
